import { Bot, Context } from 'grammy';
import dotenv from 'dotenv';
import { progressCommand } from './commands/progress';
import { helpCommand } from './commands/help';
import { assignmentsService } from '../features/assignments.service';
import { query } from '../db';

dotenv.config();

// –†–∞—Å—à–∏—Ä—è–µ–º Context –¥–ª—è TS, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –ø–æ–ª—è
interface MyContext extends Context {}

const bot = new Bot<MyContext>(process.env.BOT_TOKEN || '');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch(err => {
	console.error('BotError', err);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async ctx => {
	const rawUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
	const baseUrl = rawUrl.replace(/\/+$/, '');
	const isHttps = baseUrl.startsWith('https://');

	const buttons = [
		[
			{
				text: '–û—Ç–∫—Ä—ã—Ç—å',
				web_app: isHttps ? { url: baseUrl } : undefined,
				url: isHttps ? undefined : baseUrl,
			},
		],
		[{ text: '–ö—É—Ä—Å—ã', url: `${baseUrl}/?tab=courses` }],
		[{ text: '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', url: `${baseUrl}/?tab=progress` }],
		[{ text: '–ó–∞–¥–∞–Ω–∏—è 2-–π —á–∞—Å—Ç–∏', url: `${baseUrl}/?tab=assignments` }],
	];

	try {
		await ctx.reply('üîó Mini App –∏ –±—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏', {
			reply_markup: { inline_keyboard: buttons as any },
		});
	} catch (e) {
		console.error('Failed to send start message', e);
	}
});

// –ö–æ–º–∞–Ω–¥—ã /progress –∏ /help
bot.command('progress', progressCommand);
bot.command('help', helpCommand);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
bot.on(['message:photo', 'message:document'], async ctx => {
	const caption = ctx.msg?.caption || '';
	const match = caption.match(/assignment:(\d+)/i);
	if (!match) return ctx.reply('–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –≤–∏–¥–∞: assignment:<lessonId>');

	const lessonId = match[1];
	const file =
		(ctx.msg as any)?.document || (ctx.msg as any)?.photo?.slice(-1)[0];
	const fileId = file?.file_id;
	const fileType = (ctx.msg as any)?.document ? 'document' : 'photo';
	const userTelegramId = String(ctx.from?.id || '');

	if (!fileId) return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.');

	try {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è
		const aRes = await query(
			'SELECT a.* FROM assignments a WHERE a.lesson_id = $1 LIMIT 1',
			[lessonId]
		);
		if (!aRes.rowCount) return ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.');
		const assignment = aRes.rows[0];

		// –ê–≤—Ç-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const uRes = await query(
			'INSERT INTO users (telegram_id, username) VALUES ($1, $2) ON CONFLICT (telegram_id) DO NOTHING RETURNING *',
			[userTelegramId, ctx.from?.username || null]
		);
		let user = uRes.rows[0];
		if (!user) {
			const g = await query('SELECT * FROM users WHERE telegram_id = $1', [
				userTelegramId,
			]);
			user = g.rows[0];
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
		const price = Number(process.env.ASSIGNMENT_PRICE || 10);
		if ((user.coins || 0) < price) {
			return ctx.reply(
				`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ø–∫–æ–∏–Ω–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${price}, —É –≤–∞—Å: ${user.coins}`
			);
		}

		// –°–æ–∑–¥–∞–Ω–∏–µ submission
		const submission = await assignmentsService.createSubmission(
			String(assignment.id),
			userTelegramId,
			fileId,
			fileType
		);

		await ctx.reply('–†–∞–±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.');

		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
		const adminChat = process.env.ADMIN_CHAT_ID;
		if (adminChat) {
			await ctx.api.sendMessage(
				Number(adminChat),
				`–ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ #${submission.id} –æ—Ç @${
					ctx.from?.username || userTelegramId
				} –ø–æ —É—Ä–æ–∫—É ${lessonId}`
			);
		}
	} catch (e) {
		console.error('Assignment submit failed', e);
		await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
	}
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
export const initBot = () => {
	bot.start();
	console.log('Bot started successfully');
};

export { bot };
