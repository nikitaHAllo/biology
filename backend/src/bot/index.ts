import { Bot, Context } from 'grammy';
import dotenv from 'dotenv';
import { progressCommand } from './commands/progress';
import { helpCommand } from './commands/help';

dotenv.config();

const bot = new Bot(process.env.BOT_TOKEN || '');

// Global error handler so the bot doesn't crash
bot.catch(err => {
  console.error('BotError', err);
});

bot.command('start', async ctx => {
  const rawUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
  const url = rawUrl.replace(/\/+$/, '');
  const isHttps = url.startsWith('https://');
  try {
    if (isHttps) {
      await ctx.reply('üîó –û—Ç–∫—Ä—ã—Ç—å Mini App', {
        reply_markup: { inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å', web_app: { url } }]] },
      });
    } else {
      await ctx.reply('–í–Ω–∏–º–∞–Ω–∏–µ: Web App —Ç—Ä–µ–±—É–µ—Ç HTTPS. –ü–æ–∫ÔøΩÔøΩ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ-HTTPS URL.');
      await ctx.reply('–û—Ç–∫—Ä—ã—Ç—å Mini App –≤ –±—Ä–∞—É–∑–µ—Ä–µ', {
        reply_markup: { inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ', url }]] },
      });
    }
  } catch (e) { console.error('Failed to send start message', e); }
});

bot.command('progress', progressCommand);
bot.command('help', helpCommand);

// Basic handler for photo/doc submissions (assignment flow)
bot.on(['message:photo','message:document'], async (ctx: Context) => {
  const caption = ctx.msg?.caption || '';
  const match = caption.match(/assignment:(\d+)/i);
  if (!match) return ctx.reply('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –≤–∏–¥–∞: assignment:<lessonId>');

  const lessonId = match[1];
  const file = (ctx.msg as any)?.document || (ctx.msg as any)?.photo?.slice(-1)[0];
  const fileId = file?.file_id;
  const fileType = (ctx.msg as any)?.document ? 'document' : 'photo';

  if (!fileId) return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');

  await ctx.reply('–†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–Ω–∞ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.');
});

export const initBot = () => {
  bot.start();
  console.log('Bot started successfully');
};
